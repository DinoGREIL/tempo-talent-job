directive @specifiedBy(url: String!) on SCALAR
scalar Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")
scalar JSON
type Query {
  searchReviews: [Review]
  searchApplications: [Application]
  searchAdvantages: [Advantage]
  searchJobOffers: [JobOffer]
  searchJobCategories: [JobCategory]
  searchAvailabilities: [Availability]
  searchJobs: [Job]
  jobById(id: ID!): Job
  advantageById(id: ID!): Advantage
  applicationById(id: ID!): Application
  availabilityById(id: ID!): Availability
  jobCategoryById(id: ID!): JobCategory
  jobOfferById(id: ID!): JobOffer
  reviewById(id: ID!): Review
  getName: String
    getJWTByUser: JWTTokenDto
}

type Mutation {
  addReview(id: ID, rating: Float, message: String, providedat: Date): Review
  deleteReview(id: ID!): Boolean
  addApplication(jobofferid: ID, reviewid: ID): Application
  deleteApplication(id: ID!): Boolean
  addAdvantage(id: ID, name: String): Advantage
  deleteAdvantage(id: ID!): Boolean
  addJobOffer(
    description: String
    startdate: Date
    enddate: Date
    salary: Int
    jobid: ID
  ): JobOffer
  deleteJobOffer(id: ID!): Boolean
  addJobCategory(id: ID, name: String): JobCategory
  deleteJobCategory(id: ID!): Boolean
  addAvailability(
    id: ID
    startdate: Date
    enddate: Date
    jobid: ID
  ): Availability
  deleteAvailability(id: ID!): Boolean
  addJob(id: ID, title: String, categoryid: ID): Job
  deleteJob(id: ID!): Boolean
  removeAdvantageFromJobOffer(advantageId: ID!,jobOfferId:ID!):Boolean
  addAdvantageToJobOffer(
    advantageId: ID
    jobOfferId: ID
    
  ): JobOfferAdvantage
}
type Review {
  id: ID
  message: String
  rating: Float

  providedat: Date
}
type Application {
  id: ID
  job_offer: JobOffer
  review: Review
}
type Advantage {
  id: ID
  name: String
}
type JobOffer {
  id: ID
  description: String
  startdate: Date
  enddate: Date
  salary: Int
}
type JobCategory {
  id: ID
  name: String
}
type Job {
  id: ID
  title: String
  category: JobCategory
}
type Availability {
  id: ID
  startdate: Date
  enddate: Date
  job: Job
}
type JobOfferAdvantage {
  advantage: Advantage
  jobOffer: JobOffer
  
}



type JWTTokenDto {
    sub: String
    resourceAccess: ResourceAccess
    emailVerified: Boolean
    allowedOrigins: [String]
    iss: String
    typ: String
    preferredUsername: String
    givenName: String
    sid: String
    aud: [String]
    acr: String
    realmAccess: RealmAccess
    azp: String
    scope: String
    name: String
    exp: Float
    sessionState: String
    iat: Float
    familyName: String
    jti: String
    email: String
    additionalProperties: JSON
}

type ResourceAccess {
    account: Account
    additionalProperties: JSON
}

type Account {
    roles: [String]
    additionalProperties: JSON
}

type RealmAccess {
    roles: [String]
    additionalProperties: JSON
}

